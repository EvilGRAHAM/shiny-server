{
    "collab_server" : "",
    "contents" : "rm(list=ls())\n# Libraries -----------------------------\nlibrary(tidyverse, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(lubridate, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(readxl, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(zeallot, warn.conflicts = FALSE, quietly = TRUE)\n\n# Functions ----------------------------\ndata.conversions <- function(data_file) {\n  \n  # Converts Date to date format, and Producer + Battery to factors\n  # Grabs the year and the month for each entry.\n  # Arranges the entries chronologically\n  data_file %<>%\n    mutate(\n      Date = as.Date(Date, format = \"%m/%d/%Y\")\n    ) %>%\n    mutate(\n      Producer = as.factor(Producer)\n      ,Battery = as.factor(Battery)\n      ,Battery.1 = as.factor(Battery.1)\n      ,CrudeType = as.factor(CrudeType)\n      ,Crude_Num = as.factor(Crude_Num)\n      ,Crude_Breakdown = as.factor(Crude_Breakdown)\n      ,mth =\n        Date %>%\n        month() %>%\n        as.integer()\n      ,yr =\n        Date %>%\n        year() %>%\n        as.integer()\n      ,day =\n        Date %>%\n        day() %>%\n        as.integer()\n    ) %>%\n    arrange(Date) %>%\n    filter(\n      !is.na(VP)\n      ,!is.na(Sulf)\n      ,!is.na(Dens)\n    )\n  \n  # Re-orders the factors so unknown comes first.\n  data_file$Crude_Breakdown <- factor(data_file$Crude_Breakdown, levels(data_file$Crude_Breakdown)[c(7, 1:6)])\n  data_file\n  \n}\n\n\nread_input <- function(var_name) {\n  n <- readline(prompt = paste0(\"Enter a \", var_name, \": \"))\n}\n\n\n# Grabs the users input for the simulation parameters.\nget_input <- function() {\n  Density_input <- NA\n  Sulfur_input <- NA\n  Temp.Roll_input <- NA\n  mth_input <- NA\n  while (is.na(Density_input)) {\n    Density_input <- read_input(\"Density (kg/m3)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(Sulfur_input)) {\n    Sulfur_input <- read_input(\"Sulfur (%wt)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(Temp.Roll_input)) {\n    Temp.Roll_input <- read_input(\"7 Day Temperature Average for SE Sask (Â°C)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(mth_input)) {\n    mth_input <- read_input(\"Number of the month you wish to simulate. i.e. 1 = Jan, 2 = Feb, ...\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  return(list(Density_input, Sulfur_input, Temp.Roll_input, mth_input))\n}\n\n# God I hate having to constantly use this set of pipes. \n# Count normally outputs a tibble, so this converts it to a number so we can do\n# arithmetic and such with it.\ncount.num <- function(data_tibble) {\n  n <- \n    data_tibble %>% \n    count %>% \n    as.numeric()\n}\n\n# Data Import -----------------------------------\n\n# Reads the data in from a xlsx, and converts it to a tibble.\n# Adding interaction effects to data_complete.\n# As well it splits the mth variable into 12 dummy variables.\ndata_complete <-\n  read_csv(\n    \"https://raw.githubusercontent.com/EvilGRAHAM/shiny-server/master/Simulation/Data/VP_Data_Complete.csv\"\n  ) %>% \n  data.conversions()\n\ndata_weather <-\n  read_csv(\n    \"https://raw.githubusercontent.com/EvilGRAHAM/shiny-server/master/Simulation/Data/Weather_Data.csv\"\n  ) %>% \n  mutate(Date = as.Date(Date, format = \"%m/%d/%Y\"))\n\n# Joins the two tables together by the sample date.\ndata_complete %<>%#<- \n  # data_complete %>% \n  left_join(\n    data_weather\n    ,by = \"Date\"\n  ) %>% \n  mutate(\n    Jan = if_else(mth == 1, 1, 0)\n    ,Feb = if_else(mth == 2, 1, 0)\n    ,Mar = if_else(mth == 3, 1, 0)\n    ,Apr = if_else(mth == 4, 1, 0)\n    ,May = if_else(mth == 5, 1, 0)\n    ,Jun = if_else(mth == 6, 1, 0)\n    ,Jul = if_else(mth == 7, 1, 0)\n    ,Aug = if_else(mth == 8, 1, 0)\n    ,Sep = if_else(mth == 9, 1, 0)\n    ,Oct = if_else(mth == 10, 1, 0)\n    ,Nov = if_else(mth == 11, 1, 0)\n    ,Dec = if_else(mth == 12, 1, 0)\n    ,Sulf.C5 = Sulf * C5\n    ,Sulf.L_LSB = Sulf * Light_LSB\n    ,Sulf.L_SW = Sulf * Light_SW\n    ,Sulf.M_LSB = Sulf * Medium_LSB\n    ,Sulf.M_SW = Sulf * Medium_SW\n    ,Sulf.Midale = Sulf * Midale\n    ,Sulf.H_Sour = Sulf * Heavy_Sour\n    ,Sulf.H_SW = Sulf * Heavy_SW\n    ,Dens.C5 = Dens * C5\n    ,Dens.L_LSB = Dens * Light_LSB\n    ,Dens.L_SW = Dens * Light_SW\n    ,Dens.M_LSB = Dens * Medium_LSB\n    ,Dens.M_SW = Dens * Medium_SW\n    ,Dens.Midale = Dens * Midale\n    ,Dens.H_Sour = Dens * Heavy_Sour\n    ,Dens.H_SW = Dens * Heavy_SW\n    ,Temp.Roll.C5 = Temp.Roll * C5\n    ,Temp.Roll.L_LSB = Temp.Roll * Light_LSB\n    ,Temp.Roll.L_SW = Temp.Roll * Light_SW\n    ,Temp.Roll.M_LSB = Temp.Roll * Medium_LSB\n    ,Temp.Roll.M_SW = Temp.Roll * Medium_SW\n    ,Temp.Roll.Midale = Temp.Roll * Midale\n    ,Temp.Roll.H_Sour = Temp.Roll * Heavy_Sour\n    ,Temp.Roll.H_SW = Temp.Roll * Heavy_SW\n    ,Post_Aquisition.C5 = Post_Aquisition * C5\n    ,Post_Aquisition.L_LSB = Post_Aquisition * Light_LSB\n    ,Post_Aquisition.L_SW = Post_Aquisition * Light_SW\n    ,Post_Aquisition.M_LSB = Post_Aquisition * Medium_LSB\n    ,Post_Aquisition.M_SW = Post_Aquisition * Medium_SW\n    ,Post_Aquisition.Midale = Post_Aquisition * Midale\n    ,Post_Aquisition.H_Sour = Post_Aquisition * Heavy_Sour\n    ,Post_Aquisition.H_SW = Post_Aquisition * Heavy_SW\n  )\n\nbattery_summary <- \n  data_complete %>% \n  group_by(\n    Battery\n    ,mth\n    ,yr\n  ) %>% \n  # filter(\n  #   Midale == 1\n  # ) %>% \n  summarize(\n    `Mean VP` = mean(VP_Adjusted)\n    ,`SD VP` = sd(VP_Adjusted)\n    ,`Mean Density` = mean(Dens)\n    ,`Mean Sulfur` = mean(Sulf)\n    ,`Count` = length(Battery)\n  ) %>%\n  filter(\n    `Count` > 1\n  ) %>% \n  arrange(\n    Battery\n    ,yr\n    ,mth\n  )\n\nbattery_summary\n",
    "created" : 1501257748522.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1913468489",
    "id" : "4E6E750",
    "lastKnownWriteTime" : 3014705,
    "last_content_update" : -2147483648,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}