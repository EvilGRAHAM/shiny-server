{
    "collab_server" : "",
    "contents" : "# Libraries -----------------------------\nlibrary(glmnet, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(tidyverse, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(lubridate, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(readxl, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(ggfortify, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(plotly, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(shiny, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(DT, warn.conflicts = FALSE, quietly = TRUE)\nlibrary(zeallot, warn.conflicts = FALSE, quietly = TRUE)\n\n# Updates them_minimal so that there is borders around the graphs and the facet headings.\ntheme_minimal2 <- theme_minimal() %>%  theme_set()\ntheme_minimal2 <-\n  theme_update(\n    panel.border = element_rect(\n      linetype = \"solid\"\n      ,colour = \"grey92\"\n      ,fill = NA\n    )\n    ,strip.background = element_rect(\n      linetype = \"solid\"\n      ,colour = \"grey92\"\n      ,fill = NA\n    )\n  )\n\n# Functions ----------------------------\ndata.conversions <- function(data_file) {\n  \n  # Converts Date to date format, and Producer + Battery to factors\n  # Grabs the year and the month for each entry.\n  # Arranges the entries chronologically\n  data_file %<>%\n    mutate(\n      Date = as.Date(Date, format = \"%m/%d/%Y\")\n    ) %>%\n    mutate(\n      Producer = as.factor(Producer)\n      ,Battery = as.factor(Battery)\n      ,Battery.1 = as.factor(Battery.1)\n      ,CrudeType = as.factor(CrudeType)\n      ,Crude_Num = as.factor(Crude_Num)\n      ,Crude_Breakdown = as.factor(Crude_Breakdown)\n      ,mth =\n        Date %>%\n        month() %>%\n        as.integer()\n      ,yr =\n        Date %>%\n        year() %>%\n        as.integer()\n      ,day =\n        Date %>%\n        day() %>%\n        as.integer()\n    ) %>%\n    arrange(Date) %>%\n    filter(\n      !is.na(VP)\n      ,!is.na(Sulf)\n      ,!is.na(Dens)\n    )\n  \n  # Re-orders the factors so unknown comes first.\n  data_file$Crude_Breakdown <- factor(data_file$Crude_Breakdown, levels(data_file$Crude_Breakdown)[c(7, 1:6)])\n  data_file\n  \n}\n\n\nread_input <- function(var_name) {\n  n <- readline(prompt = paste0(\"Enter a \", var_name, \": \"))\n}\n\n\n# Grabs the users input for the simulation parameters.\nget_input <- function() {\n  Density_input <- NA\n  Sulfur_input <- NA\n  Temp.Roll_input <- NA\n  mth_input <- NA\n  while (is.na(Density_input)) {\n    Density_input <- read_input(\"Density (kg/m3)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(Sulfur_input)) {\n    Sulfur_input <- read_input(\"Sulfur (%wt)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(Temp.Roll_input)) {\n    Temp.Roll_input <- read_input(\"7 Day Temperature Average for SE Sask (Â°C)\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  while (is.na(mth_input)) {\n    mth_input <- read_input(\"Number of the month you wish to simulate. i.e. 1 = Jan, 2 = Feb, ...\") %>% as.numeric() %>% try(silent = TRUE)\n  }\n  return(list(Density_input, Sulfur_input, Temp.Roll_input, mth_input))\n}\n\n# God I hate having to constantly use this set of pipes. \n# Count normally outputs a tibble, so this converts it to a number so we can do\n# arithmetic and such with it.\ncount.num <- function(data_tibble) {\n  n <- \n    data_tibble %>% \n    count %>% \n    as.numeric()\n}\n\ncrude_type_check_old <- function(density, sulfur){\n  # Any input with a density <= 770 we call C5 regardless of sulfur\n  # If Sulfur is <= 0.5 it is deemed Sweet vs. a Sour w/ sulfur > 0.5\n  # Lights have a density <= 825, Mediums have a density (825, 900] for SW, (825, 870] for Sours\n  # A Midale is a sour w/ density in (870, 900]\n  # Heavy's have a density > 900\n  if(density <= 770) {\n    \"C5\"\n  } else if(sulfur <= 0.5) {\n    if(density <= 825) {\n      \"Light_SW\"\n    } else if(density > 825 & density <= 900) {\n      \"Medium_SW\"\n    } else {\n      \"Heavy_SW\"\n    }\n  } else {\n    if(density <= 825) {\n      \"Light_LSB\"\n    } else if(density > 825 & density <= 870) {\n      \"Medium_LSB\"\n    } else if(density > 870 & density <= 900) {\n      \"Midale\"\n    } else {\n      \"Heavy_Sour\"\n    }\n  }\n}\n\ncrude_type_check <- function(density, sulfur){\n  # Any input with a density <= 770 we call C5 regardless of sulfur\n  # If Sulfur is <= 0.5 it is deemed Sweet vs. a Sour w/ sulfur > 0.5\n  # Lights have a density <= 825, Mediums have a density (825, 900]\n  # A Midale is a sour w/ density in (865, 900] and sulfur > 2\n  # Heavy's have a density > 900\n  if(density <= 770) {\n    \"C5\"\n  } else if(sulfur <= 0.5) {\n    if(density <= 825) {\n      \"Light_SW\"\n    } else if(density > 825 & density <= 900) {\n      \"Medium_SW\"\n    } else {\n      \"Heavy_SW\"\n    }\n  } else {\n    if(density <= 825) {\n      \"Light_LSB\"\n    } else if(density > 865 & density <= 900 & sulfur >= 2) {\n      \"Midale\"\n    } else if(density > 825 & density <= 900) {\n      \"Medium_LSB\"\n    } else {\n      \"Heavy_Sour\"\n    }\n  }\n}\n\n# Page -----------------------------\nfunction(input, output, session) {\n  \n  # Data Import -----------------------------------\n  \n  # Reads the data in from a xlsx, and converts it to a tibble.\n  # Adding interaction effects to data_complete.\n  # As well it splits the mth variable into 12 dummy variables.\n  data_complete <-\n    read_csv(\n      \"https://raw.githubusercontent.com/EvilGRAHAM/shiny-server/master/Simulation/Data/VP_Data_Complete.csv\"\n    ) %>% \n    data.conversions()\n  \n  data_weather <-\n    read_csv(\n      \"https://raw.githubusercontent.com/EvilGRAHAM/shiny-server/master/Simulation/Data/Weather_Data.csv\"\n    ) %>% \n    mutate(Date = as.Date(Date, format = \"%m/%d/%Y\"))\n  \n  # Joins the two tables together by the sample date.\n  data_complete %<>%\n    left_join(\n      data_weather\n      ,by = \"Date\"\n    ) %>% \n    mutate(\n      Jan = if_else(mth == 1, 1, 0)\n      ,Feb = if_else(mth == 2, 1, 0)\n      ,Mar = if_else(mth == 3, 1, 0)\n      ,Apr = if_else(mth == 4, 1, 0)\n      ,May = if_else(mth == 5, 1, 0)\n      ,Jun = if_else(mth == 6, 1, 0)\n      ,Jul = if_else(mth == 7, 1, 0)\n      ,Aug = if_else(mth == 8, 1, 0)\n      ,Sep = if_else(mth == 9, 1, 0)\n      ,Oct = if_else(mth == 10, 1, 0)\n      ,Nov = if_else(mth == 11, 1, 0)\n      ,Dec = if_else(mth == 12, 1, 0)\n      ,Sulf.C5 = Sulf * C5\n      ,Sulf.L_LSB = Sulf * Light_LSB\n      ,Sulf.L_SW = Sulf * Light_SW\n      ,Sulf.M_LSB = Sulf * Medium_LSB\n      ,Sulf.M_SW = Sulf * Medium_SW\n      ,Sulf.Midale = Sulf * Midale\n      ,Sulf.H_Sour = Sulf * Heavy_Sour\n      ,Sulf.H_SW = Sulf * Heavy_SW\n      ,Dens.C5 = Dens * C5\n      ,Dens.L_LSB = Dens * Light_LSB\n      ,Dens.L_SW = Dens * Light_SW\n      ,Dens.M_LSB = Dens * Medium_LSB\n      ,Dens.M_SW = Dens * Medium_SW\n      ,Dens.Midale = Dens * Midale\n      ,Dens.H_Sour = Dens * Heavy_Sour\n      ,Dens.H_SW = Dens * Heavy_SW\n      ,Temp.Roll.C5 = Temp.Roll * C5\n      ,Temp.Roll.L_LSB = Temp.Roll * Light_LSB\n      ,Temp.Roll.L_SW = Temp.Roll * Light_SW\n      ,Temp.Roll.M_LSB = Temp.Roll * Medium_LSB\n      ,Temp.Roll.M_SW = Temp.Roll * Medium_SW\n      ,Temp.Roll.Midale = Temp.Roll * Midale\n      ,Temp.Roll.H_Sour = Temp.Roll * Heavy_Sour\n      ,Temp.Roll.H_SW = Temp.Roll * Heavy_SW\n      ,Post_Aquisition.C5 = Post_Aquisition * C5\n      ,Post_Aquisition.L_LSB = Post_Aquisition * Light_LSB\n      ,Post_Aquisition.L_SW = Post_Aquisition * Light_SW\n      ,Post_Aquisition.M_LSB = Post_Aquisition * Medium_LSB\n      ,Post_Aquisition.M_SW = Post_Aquisition * Medium_SW\n      ,Post_Aquisition.Midale = Post_Aquisition * Midale\n      ,Post_Aquisition.H_Sour = Post_Aquisition * Heavy_Sour\n      ,Post_Aquisition.H_SW = Post_Aquisition * Heavy_SW\n    )\n  \n  data_weather <- \n    data_weather %>% \n    mutate(      \n      mth =\n        Date %>%\n        month() %>%\n        as.integer()\n      ,yr =\n        Date %>%\n        year() %>%\n        as.integer()\n      ,day =\n        Date %>%\n        day() %>%\n        as.integer()\n    )\n\n  \n  # Variables ----------------------------------\n  Mth <- c(\n    `1` = \"Jan\"\n    ,`2` = \"Feb\"\n    ,`3` = \"Mar\"\n    ,`4` = \"Apr\"\n    ,`5` = \"May\"\n    ,`6` = \"Jun\"\n    ,`7` = \"Jul\"\n    ,`8` = \"Aug\"\n    ,`9` = \"Sep\"\n    ,`10` = \"Oct\"\n    ,`11` = \"Nov\"\n    ,`12` = \"Dec\"\n  )\n  \n  Mth_long <- c(\n    `1` = \"January\"\n    ,`2` = \"February\"\n    ,`3` = \"March\"\n    ,`4` = \"April\"\n    ,`5` = \"May\"\n    ,`6` = \"June\"\n    ,`7` = \"July\"\n    ,`8` = \"August\"\n    ,`9` = \"September\"\n    ,`10` = \"October\"\n    ,`11` = \"November\"\n    ,`12` = \"December\"\n  )\n  \n  Mth_comb <- cbind(Mth, Mth_long)\n  \n  Crude_Breakdown_Cleaned <- c(\n    `Unknown` = \"Unknown\"\n    ,`C5` = \"C5+\"\n    ,`Light_LSB` = \"Light LSB\"\n    ,`Light_SW` = \"Light SW\"\n    ,`Medium_LSB` = \"Medium LSB\"\n    ,`Medium_SW` = \"Medium SW\"\n    ,`Midale` = \"Midale\"\n    ,`Heavy_Sour` = \"Heavy Sour\"\n    ,`Heavy_SW` = \"Heavy SW\"\n  )\n  \n  \n  # This is a list of all the variables we wish to include in the LASSO.\n  var.pred <- c(\n    \"Sulf\"\n    ,\"Dens\"\n    ,\"Temp.Mean\"\n    ,\"Temp.Roll\"\n    ,\"Estevan\"\n    ,\"Weyburn\"\n    ,\"Oxbow\"\n    ,\"Yellow Grass North\"\n    ,\"Melita\"\n    ,\"Kipling\"\n    # ,\"VP_95_Spec\"\n    ,\"C5\"\n    ,\"Light_LSB\"\n    ,\"Light_SW\"\n    ,\"Medium_LSB\"\n    ,\"Medium_SW\"\n    ,\"Midale\"\n    ,\"Heavy_Sour\"\n    ,\"Heavy_SW\"\n    # ,\"Jan\"\n    # ,\"Feb\"\n    # ,\"Mar\"\n    # ,\"Apr\"\n    # ,\"May\"\n    # ,\"Jun\"\n    # ,\"Jul\"\n    # ,\"Aug\"\n    # ,\"Sep\"\n    # ,\"Oct\"\n    # ,\"Nov\"\n    # ,\"Dec\"\n    # ,\"Post_Aquisition\"\n    ,\"Sulf.C5\"\n    ,\"Sulf.L_LSB\"\n    ,\"Sulf.L_SW\"\n    ,\"Sulf.M_LSB\"\n    ,\"Sulf.M_SW\"\n    ,\"Sulf.Midale\"\n    ,\"Sulf.H_Sour\"\n    ,\"Sulf.H_SW\"\n    ,\"Dens.C5\"\n    ,\"Dens.L_LSB\"\n    ,\"Dens.L_SW\"\n    ,\"Dens.M_LSB\"\n    ,\"Dens.M_SW\"\n    ,\"Dens.Midale\"\n    ,\"Dens.H_Sour\"\n    ,\"Dens.H_SW\"\n    ,\"Temp.Roll.C5\"\n    ,\"Temp.Roll.L_LSB\"\n    ,\"Temp.Roll.L_SW\"\n    ,\"Temp.Roll.M_LSB\"\n    ,\"Temp.Roll.M_SW\"\n    ,\"Temp.Roll.Midale\"\n    ,\"Temp.Roll.H_Sour\"\n    ,\"Temp.Roll.H_SW\"\n    # ,\"Post_Aquisition.C5\"\n    # ,\"Post_Aquisition.L_LSB\"\n    # ,\"Post_Aquisition.L_SW\"\n    # ,\"Post_Aquisition.M_LSB\"\n    # ,\"Post_Aquisition.M_SW\"\n    # ,\"Post_Aquisition.Midale\"\n    # ,\"Post_Aquisition.H_Sour\"\n    # ,\"Post_Aquisition.H_SW\"\n  )\n  \n  lasso_var_names <- c(\n    \"Sulfur\"\n    ,\"Density\"\n    ,\"Mean Temperature\"\n    ,\"7 Day Rolling Temperature\"\n    ,\"Estevan\"\n    ,\"Weyburn\"\n    ,\"Oxbow\"\n    ,\"Yellow Grass\"\n    ,\"Melita\"\n    ,\"Kipling\"\n    # ,\"VP 95 Spec\"\n    ,\"C5+\"\n    ,\"Light LSB\"\n    ,\"Light SW\"\n    ,\"Medium LSB\"\n    ,\"Medium SW\"\n    ,\"Midale\"\n    ,\"Heavy Sour\"\n    ,\"Heavy SW\"\n    # ,\"Jan\"\n    # ,\"Feb\"\n    # ,\"Mar\"\n    # ,\"Apr\"\n    # ,\"May\"\n    # ,\"Jun\"\n    # ,\"Jul\"\n    # ,\"Aug\"\n    # ,\"Sep\"\n    # ,\"Oct\"\n    # ,\"Nov\"\n    # ,\"Dec\"\n    # ,\"Post Aquisition\"\n    ,\"Sulfur:C5+\"\n    ,\"Sulfur:Light LSB\"\n    ,\"Sulfur:Light SW\"\n    ,\"Sulfur:Medium LSB\"\n    ,\"Sulfur:Medium SW\"\n    ,\"Sulfur:Midale\"\n    ,\"Sulfur:Heavy Sour\"\n    ,\"Sulfur:Heavy SW\"\n    ,\"Density:C5+\"\n    ,\"Density:Light LSB\"\n    ,\"Density:Light SW\"\n    ,\"Density:Medium LSB\"\n    ,\"Density:Medium SW\"\n    ,\"Density:Midale\"\n    ,\"Density:Heavy Sour\"\n    ,\"Density:Heavy SW\"\n    ,\"Temp.Roll:C5+\"\n    ,\"Temp.Roll:Light LSB\"\n    ,\"Temp.Roll:Light SW\"\n    ,\"Temp.Roll:Medium LSB\"\n    ,\"Temp.Roll:Medium SW\"\n    ,\"Temp.Roll:Midale\"\n    ,\"Temp.Roll:Heavy Sour\"\n    ,\"Temp.Roll:Heavy SW\"\n    # ,\"Post Aquisition:C5+\"\n    # ,\"Post Aquisition:Light LSB\"\n    # ,\"Post Aquisition:Light SW\"\n    # ,\"Post Aquisition:Medium LSB\"\n    # ,\"Post Aquisition:Medium SW\"\n    # ,\"Post Aquisition:Midale\"\n    # ,\"Post Aquisition:Heavy Sour\"\n    # ,\"Post Aquisition:Heavy SW\"\n  )\n  \n  \n  # This only needs to occur when the app opens.\n  fitted_actual_input_summary <- tibble(\n    Month = NA\n    ,Density = as.numeric(NA)\n    ,Sulfur = as.numeric(NA)\n    ,`Crude Type` = NA\n    ,`7 Day Temperature Average` = as.numeric(NA)\n    ,`Mean Historical VP` = as.numeric(NA)\n    ,`Mean Predicted VP` = as.numeric(NA)\n    ,`Median Predicted VP` = as.numeric(NA)\n    ,`SD Predicted VP` = as.numeric(NA)\n    ,`Min Predicted VP` = as.numeric(NA)\n    ,`Max Predicted VP` = as.numeric(NA)\n    ,`Data Points` = as.numeric(NA)\n  )\n  \n  LASSO_coef <- tibble(\n  `Coefficients` = as.numeric(NA)\n  ,`Variables` = as.numeric(NA)\n  )\n  \n  \n  # Main Function ------------------------------\n  main <- function(){\n    \n    # Setup -------------------------------------------------------------------\n    \n    set.seed(19)\n    \n    # Looks at how the VP changes by crude type pre and post aquisition.\n    post_aquisition_bd <- \n      data_complete %>% \n      group_by(\n        Post_Aquisition\n        ,Crude_Breakdown\n      ) %>% \n      summarize(\n        Mean = mean(VP)\n      )\n    post_aquisition_bd_spread <- \n      post_aquisition_bd %>% \n      spread(\n        Post_Aquisition\n        ,Mean\n      ) %>% \n      mutate(\n        Change_in_VP = `1` - `0`\n      )\n    colnames(post_aquisition_bd_spread) <- c(\"Crude_Breakdown\", \"Pre_Aquisition_VP\", \"Post_Aquisition_VP\", \"Change_in_VP\")\n    \n    # Only use the adjusted values if the checkbox is set to true.\n    if (input$post_aquisition_adjustment){\n      data_complete %<>%\n        left_join(\n          post_aquisition_bd_spread\n        ) %>% \n        mutate(\n          VP = if_else(.$Post_Aquisition == 0\n                       ,VP + Change_in_VP\n                       ,VP\n          )\n        )\n    }\n    \n    \n    # LASSO -------------------------------------------------------------------\n    \n    # We generate a matrix from the complete data set using the list of variables defined above.\n    # Generates a Matrix containing the predictor variables.\n    lasso.pred <-\n      data_complete %>%\n      select(var.pred) %>%\n      as.matrix()\n    # Generates a matrix with the response variable only.\n    lasso.result <-\n      data_complete %>%\n      select(VP) %>%\n      as.matrix()\n    # Names the columns in the two matrices so they read nicer.\n    colnames(lasso.pred) <- lasso_var_names\n    colnames(lasso.result) <- \"VP\"\n    \n\n    set.seed(8)\n    cvfit_penalty_dummy <-\n      cv.glmnet(\n        x = lasso.pred\n        ,y = lasso.result\n        ,alpha = input$alpha_input\n      )\n    LASSO_coef <- coef(cvfit_penalty_dummy, s = \"lambda.1se\", exact = TRUE)\n    \n    \n    # Simulation Setup ---------------------------------------------\n    \n    \n    Density_input <- input$dens_input\n    Sulfur_input <- input$sulf_input\n    Temp.Roll_input <- input$temp.roll_input\n    mth_input <- input$mth_input\n    # How many times we multiply the SD by to get our input rows.\n    density_multiplier <- input$multiplier_density_input\n    sulfur_multiplier <- input$multiplier_sulfur_input\n    weather_multiplier <- input$multiplier_weather_input\n    \n    # Creates an empty tibble to be filled with the results of the predictions.\n    fitted_actual_input <- tibble(\n      Num_Month = as.numeric(character())\n      ,Month = as.factor(character())\n      ,Crude_Breakdown = character()\n      ,Fitted = as.numeric(character())\n    )\n    \n    \n    # Simulation Run -----------------------------------\n    \n    set.seed(4815609)\n    \n    # Determines the crude type based on the inputted data.\n    Crude_Breakdown_input <- crude_type_check(Density_input, Sulfur_input)\n    \n    # This finds the standard deviation for the crude type inputed.\n    crude_bd_stats <-\n      data_complete %>%\n      filter(Crude_Breakdown == Crude_Breakdown_input) %>%\n      summarize(\n        Density_Mean = mean(Dens)\n        ,Density_SD = sd(Dens)\n        ,Sulfur_Mean = mean(Sulf)\n        ,Sulfur_SD = sd(Sulf)\n      )\n    crude_bd_stats\n    \n    # As well as the mean and sd for Temp.Roll for the month inputted\n    weather_stats <-\n      data_weather %>%\n      filter(mth == mth_input %>% as.numeric()) %>%\n      summarize(\n        Temp.Roll_Mean = mean(Temp.Roll)\n        ,Temp.Roll_SD = sd(Temp.Roll)\n      )\n    weather_stats\n    \n    # Grabs all temperature entries whose entries are within +- multiplier*sd\n    data_weather_input <-\n      data_weather %>%\n      select(\n        -c(\n          Date\n          ,SD\n          ,day\n          ,mth\n          ,yr\n        )\n      ) %>%\n      filter(\n        Temp.Roll >= Temp.Roll_input %>% as.numeric() - weather_multiplier * (\n          weather_stats %>%\n            select(Temp.Roll_SD) %>%\n            as.numeric()\n        ) &\n          Temp.Roll <= Temp.Roll_input %>% as.numeric() + weather_multiplier * (\n            weather_stats %>%\n              select(Temp.Roll_SD) %>%\n              as.numeric()\n          ) %>% as.numeric()\n      )\n    \n    # Filters the data that will be inputed into the simulation s.t. the crude type matches,\n    # and the density and sulfur fall within a range of values.\n    # As well we remove any of the temperature data, as we will randomly insert them\n    # from a different weather table for the simulation.\n    data_input <-\n      data_complete %>%\n      filter(\n        # You can uncomment the first line if you want to force the simulated data set to only\n        # contain crude of the same type as the inputted.\n        # We filter out any crudes that don't exist within the inputed temperature range.\n        # As well if you uncomment the second line, only those entries of the same month as \n        # the inputted are used.\n        # Crude_Breakdown == Crude_Breakdown_input &\n        # mth == as.numeric(mth_input) &\n        Temp.Roll >= Temp.Roll_input %>% as.numeric() - weather_multiplier * (\n          weather_stats %>%\n            select(Temp.Roll_SD) %>%\n            as.numeric()\n        ) &\n          Temp.Roll <= Temp.Roll_input %>% as.numeric() + weather_multiplier * (\n            weather_stats %>%\n              select(Temp.Roll_SD) %>%\n              as.numeric()\n          ) &\n          Dens >= Density_input %>% as.numeric() - density_multiplier * (\n            crude_bd_stats %>%\n              select(Density_SD) %>%\n              as.numeric()\n          ) &\n          Dens <= Density_input %>% as.numeric() + density_multiplier * (\n            crude_bd_stats %>%\n              select(Density_SD) %>%\n              as.numeric()\n          ) &\n          Sulf >= Sulfur_input %>% as.numeric() - sulfur_multiplier * (\n            crude_bd_stats %>%\n              select(Sulfur_SD) %>%\n              as.numeric()\n          ) &\n          Sulf <= Sulfur_input %>% as.numeric() + sulfur_multiplier * (\n            crude_bd_stats %>%\n              select(Sulfur_SD) %>%\n              as.numeric()\n          )\n      ) %>% \n      select(\n        -c(\n          Temp.Mean\n          ,Temp.Roll\n          ,Estevan\n          ,Weyburn\n          ,Oxbow\n          ,`Yellow Grass North`\n          ,Melita\n          ,Kipling\n        )\n      )\n    \n    # Stops the main function if no data is returned.\n    if(count(data_input) == 0){\n      return(list(\n        returned_data <- FALSE\n        ,data.frame(x = numeric())\n        ,ggplot(data = data.frame(x = numeric())) + geom_blank()\n        ,ggplot(data = data.frame(x = numeric())) + geom_blank()\n        ,LASSO_coef\n        ,data.frame(x = numeric())\n      )\n      )\n      stopifnot(TRUE)\n    }\n    \n    # Instead of using the given temperature value from the data,\n    # we instead bootstrap in values from our filtered list of weather data.\n    # There isn't that strong of a relationship between temperature and crude qualities,\n    # so we just randomly insert them into the prediction matrix\n    pred_matrix_input <-\n      data_input %>%\n      cbind(\n        sample_n(\n          data_weather_input\n          ,size =\n            data_input %>%\n            count() %>%\n            as.numeric()\n          ,replace = TRUE\n        )\n      ) %>%\n      mutate(\n        mth = as.numeric(mth_input)\n        ,Jan = if_else(mth == 1, 1, 0)\n        ,Feb = if_else(mth == 2, 1, 0)\n        ,Mar = if_else(mth == 3, 1, 0)\n        ,Apr = if_else(mth == 4, 1, 0)\n        ,May = if_else(mth == 5, 1, 0)\n        ,Jun = if_else(mth == 6, 1, 0)\n        ,Jul = if_else(mth == 7, 1, 0)\n        ,Aug = if_else(mth == 8, 1, 0)\n        ,Sep = if_else(mth == 9, 1, 0)\n        ,Oct = if_else(mth == 10, 1, 0)\n        ,Nov = if_else(mth == 11, 1, 0)\n        ,Dec = if_else(mth == 12, 1, 0) \n        ,Sulf.C5 = Sulf * C5\n        ,Sulf.L_LSB = Sulf * Light_LSB\n        ,Sulf.L_SW = Sulf * Light_SW\n        ,Sulf.M_LSB = Sulf * Medium_LSB\n        ,Sulf.M_SW = Sulf * Medium_SW\n        ,Sulf.Midale = Sulf * Midale\n        ,Sulf.H_Sour = Sulf * Heavy_Sour\n        ,Sulf.H_SW = Sulf * Heavy_SW\n        ,Dens.C5 = Dens * C5\n        ,Dens.L_LSB = Dens * Light_LSB\n        ,Dens.L_SW = Dens * Light_SW\n        ,Dens.M_LSB = Dens * Medium_LSB\n        ,Dens.M_SW = Dens * Medium_SW\n        ,Dens.Midale = Dens * Midale\n        ,Dens.H_Sour = Dens * Heavy_Sour\n        ,Dens.H_SW = Dens * Heavy_SW\n        ,Temp.Roll.C5 = Temp.Roll * C5\n        ,Temp.Roll.L_LSB = Temp.Roll * Light_LSB\n        ,Temp.Roll.L_SW = Temp.Roll * Light_SW\n        ,Temp.Roll.M_LSB = Temp.Roll * Medium_LSB\n        ,Temp.Roll.M_SW = Temp.Roll * Medium_SW\n        ,Temp.Roll.Midale = Temp.Roll * Midale\n        ,Temp.Roll.H_Sour = Temp.Roll * Heavy_Sour\n        ,Temp.Roll.H_SW = Temp.Roll * Heavy_SW\n        ,Post_Aquisition.C5 = Post_Aquisition * C5\n        ,Post_Aquisition.L_LSB = Post_Aquisition * Light_LSB\n        ,Post_Aquisition.L_SW = Post_Aquisition * Light_SW\n        ,Post_Aquisition.M_LSB = Post_Aquisition * Medium_LSB\n        ,Post_Aquisition.M_SW = Post_Aquisition * Medium_SW\n        ,Post_Aquisition.Midale = Post_Aquisition * Midale\n        ,Post_Aquisition.H_Sour = Post_Aquisition * Heavy_Sour\n        ,Post_Aquisition.H_SW = Post_Aquisition * Heavy_SW\n      ) %>%\n      select(var.pred) %>%\n      as.matrix()\n    colnames(pred_matrix_input) <- NULL\n    \n    fitted_actual_input <-\n      fitted_actual_input %>%\n      rbind(\n        tibble(\n          Num_Month = mth_input\n          ,Month = Mth_long[mth_input]\n          ,Crude_Breakdown = data_input$Crude_Breakdown\n          ,Fitted =\n            predict(\n              cvfit_penalty_dummy\n              ,newx = pred_matrix_input\n              ,s = \"lambda.1se\"\n            ) %>%\n            as.vector()\n          ,Historical = data_input$VP\n        )\n      )\n    \n    \n    # Simulation Outputs --------------------------------------\n    # Reorders the months to be in calendar-esque order.\n    fitted_actual_input$Month <-\n      fitted_actual_input$Month %>%\n      as.factor() %>%\n      factor(levels(.)[\n        c(\n          6\n          ,5\n          ,9\n          ,2\n          ,10\n          ,8\n          ,7\n          ,3\n          ,13\n          ,12\n          ,11\n          ,4\n          ,1\n        )\n        ]\n      )\n    \n    fitted_actual_input_tidy <-\n      fitted_actual_input %>%\n      gather(\n        Result\n        ,VP\n        ,-Num_Month\n        ,-Month\n        ,-Crude_Breakdown\n      )\n    \n    fitted_actual_input_summary <-\n      fitted_actual_input %>%\n      group_by(Month, Num_Month) %>%\n      summarize(\n        `Mean Historical VP` = round(mean(Historical), 4)\n        ,`Mean Predicted VP` = round(mean(Fitted), 4)\n        ,`Median Predicted VP` = round(median(Fitted), 4)\n        ,`SD Predicted VP` = round(sd(Fitted), 4)\n        ,`Min Predicted VP` = round(min(Fitted), 4)\n        ,`Max Predicted VP` = round(max(Fitted), 4)\n        ,`Data Points` = length(Fitted)\n      ) %>%\n      ungroup() %>%\n      mutate(\n        Density = Density_input\n        ,Sulfur = Sulfur_input\n        ,`Crude Type` = Crude_Breakdown_Cleaned[Crude_Breakdown_input]\n        ,`7 Day Temperature Average` = Temp.Roll_input\n      ) %>% \n      select(\n        Month\n        ,Density\n        ,Sulfur\n        ,`Crude Type`\n        ,`7 Day Temperature Average`\n        ,`Mean Historical VP`\n        ,`Mean Predicted VP`\n        ,`Median Predicted VP`\n        ,`SD Predicted VP`\n        ,`Min Predicted VP`\n        ,`Max Predicted VP`\n        ,`Data Points`\n      )\n    fitted_actual_input_summary\n\n    # Adds back the column names for the prediction matrix so it can be downloaded to a csv.\n    colnames(pred_matrix_input) <- var.pred\n    \n    # Creates a list of the data used in the simulation to be downloaded by the user.\n    data_output <- \n      pred_matrix_input %>% \n      as.data.frame() %>% \n      mutate(\n        `Predicted VP` = fitted_actual_input$Fitted\n        ,`Historical VP` = fitted_actual_input$Historical\n      )\n    \n    # Simulation Graphs ------------------------------------------\n    b_base <-\n      ggplot(\n        data = fitted_actual_input_tidy\n        ,aes(\n          x = VP\n          ,colour = Result\n        )\n      ) +\n      scale_colour_brewer(\n        type = \"qual\"\n        ,name = \"Methodology\"\n        ,palette = \"Dark2\"\n      ) +\n      labs(\n        title = \"Distribution of VP in kPa\"\n        ,subtitle =\n          paste(\n            \"For\"\n            ,Crude_Breakdown_Cleaned[Crude_Breakdown_input]\n          )\n        ,x = \"VP (kPa)\"\n      ) +\n      facet_wrap(\n        ~ Month\n      )\n    \n    b_kern <-\n      b_base +\n      geom_density() +\n      labs(\n        y = \"Density\"\n      )\n    \n    b_ecdf <-\n      b_base +\n      stat_ecdf(\n        geom = \"line\"\n      ) +\n      labs(\n        y = \"P(< VP)\"\n      )\n    \n    # Return ------------------------------\n    return(\n      list(\n        returned_data <- TRUE\n        ,fitted_actual_input_summary\n        ,b_kern\n        ,b_ecdf\n        ,LASSO_coef\n        ,data_output\n      )\n    )\n  }\n  \n  # Output ------------------------------------\n\n  # Creates an output when the action button is pressed.\n  observeEvent(input$run_sim, {\n    \n    # Run Sim --------------------------\n    # Adds a progress bar to show the simulation is running.\n    withProgress(\n      message = \"Running Simulation\"\n      ,value = NULL\n      ,c(\n        returned_data_output\n        ,fitted_actual_input_summary_output\n        ,b_kern_output\n        ,b_ecdf_output\n        ,LASSO_coef_output\n        ,data_output\n      ) %<-% main()\n    )\n    \n    # Data Cleaning ----------------------\n    # Checks to see if any data, as if we don't these cause the application to crash.\n    if(returned_data_output){\n      fitted_actual_input_summary_new <- as.tibble(fitted_actual_input_summary_output)\n      # To get each button push to add a new row, I had to initialize the tibble with NA's,\n      # after we add a row, the NAs are removed.\n      fitted_actual_input_summary <<-\n        rbind(\n          fitted_actual_input_summary\n          ,fitted_actual_input_summary_new\n        ) %>% \n        filter(!is.na(Month))\n    } else{\n      showNotification(\n        \"No data was found\"\n        ,type = \"error\"\n      )\n    }\n    \n    # Charts the results from each successive simulation.\n    result_chart <-\n      fitted_actual_input_summary %>% \n      mutate(Iteration = 1:count.num(fitted_actual_input_summary)) %>%\n      select(\n        -c(\n          Density\n          ,Sulfur\n          ,`Crude Type`\n          ,`7 Day Temperature Average`\n          ,`SD Predicted VP`\n          ,`Data Points`\n        )\n      ) %>% \n      gather(\n        Result\n        ,VP\n        ,-Iteration\n        ,-Month\n      ) %>% \n      ggplot(\n        aes(\n          x = Iteration\n          ,y = `VP`\n          ,colour = Result\n        )\n      ) +\n      scale_colour_brewer(\n        type = \"qual\"\n        ,name = \"Result:\"\n        ,palette = \"Set2\"\n      ) +\n      labs(\n        title = \"Simulation Results\"\n        ,y = \"VP (kPa)\"\n      ) +\n      geom_line() +\n      geom_point()\n    \n    # Grabs the variables and coefficients of the LASSO regression.\n    LASSO_coef <-\n      # LASSO_coef %>% \n      LASSO_coef_output %>%\n      as.matrix() %>%\n      round(4) %>% \n      as.data.frame() %>%\n      rownames_to_column() %>%\n      as.tibble() %>%\n      filter(\n        `1` != 0\n      )\n    colnames(LASSO_coef) <- c(\"Variable\", \"Coefficient\")\n    \n    \n    # Outputs -----------------------------------\n    # Plots the kernel density estimator and the ECDF and the results\n    output$b_kern <- renderPlot(b_kern_output)\n    output$b_ecdf <- renderPlot(b_ecdf_output)\n    output$result_chart <- renderPlot(result_chart)\n    \n    output$fitted_actual_input_summary <- renderDataTable(fitted_actual_input_summary)\n    \n    output$LASSO_coef <- renderDataTable(LASSO_coef)\n    \n    # Lets you download the data used in the model.\n    output$downloadData <- \n      downloadHandler(\n        filename = { paste(\"VP_Data_\", Sys.Date(), \".csv\", sep = \"\") }\n        ,content = function(file) {\n          write.csv(data_output, file)\n        }\n      )\n    \n    # Lets you download the simulation results\n    output$downloadResult <- \n      downloadHandler(\n        filename = { paste(\"VP_Simulation_Results_\", Sys.Date(), \".csv\", sep = \"\") }\n        ,content = function(file) {\n          write.csv(fitted_actual_input_summary %>% as.matrix, file)\n        }\n      )\n    \n    # Downloads the coefficients of the LASSO regression.\n    output$downloadModel <- \n      downloadHandler(\n        filename = { paste(\"VP_Model_\", Sys.Date(), \".csv\", sep = \"\") }\n        ,content = function(file) {\n          write.csv(\n            LASSO_coef_output %>%\n              as.matrix() %>%\n              as.data.frame() %>%\n              rownames_to_column() %>%\n              as.tibble()\n            , file\n          )\n        }\n      )\n    \n    \n  })\n  \n  # Output Defaults -----------------------------------\n  # Plots the kernel density estimator and the ECDF and the results\n  output$b_kern <- renderPlot(\n    ggplot() + \n      geom_blank()\n  )\n  output$b_ecdf <- renderPlot(\n    ggplot() + \n      geom_blank()\n  )\n  output$result_chart <- renderPlot(\n    ggplot() + \n      geom_blank()\n  )\n  \n  output$fitted_actual_input_summary <- renderDataTable(fitted_actual_input_summary)\n  \n  output$LASSO_coef <- renderDataTable(LASSO_coef)\n  \n\n}\n\n",
    "created" : 1500925973897.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "0|12|26|0|\n27|12|164|0|\n28|41|68|0|\n71|34|73|0|\n77|25|95|0|\n100|36|105|0|\n107|50|134|0|\n136|46|163|0|\n168|16|255|2|\n256|14|459|2|\n463|12|502|4|\n503|12|530|4|\n531|23|551|4|\n552|21|763|4|\n764|25|844|4|\n845|24|887|4|\n888|13|898|5|\n901|11|1040|2|\n906|14|920|4|\n921|20|993|4|\n994|14|1038|4|\n",
    "hash" : "2657373872",
    "id" : "9268679A",
    "lastKnownWriteTime" : 1501527469,
    "last_content_update" : -2147483648,
    "path" : "~/GitHub/shiny-server/Simulation/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineSize" : "109",
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}